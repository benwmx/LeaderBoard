(()=>{"use strict";var n={822:(n,e,A)=>{A.d(e,{Z:()=>d});var t=A(15),r=A.n(t),o=A(645),a=A.n(o),i=A(667),s=A.n(i),c=new URL(A(916),A.b),l=a()(r());l.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Lobster&display=swap);"]),l.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Lobster&family=Merriweather+Sans&display=swap);"]);var u=s()(c);l.push([n.id,"body {\n  position: relative;\n  background-image: url("+u+');\n  display: flex;\n  flex-flow: column;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  height: 100vh;\n  overflow: hidden;\n}\n\nh1 {\n  margin: 20px;\n  font-family: "Lobster", cursive;\n  color: #a39d92;\n  font-size: 3rem;\n}\n\nh2 {\n  font-family: "Merriweather Sans", sans-serif;\n  font-size: 2rem;\n  color: #daccc3;\n}\n\nmain {\n  height: 75%;\n  display: flex;\n  margin: 20px 80px;\n}\n\n.main-item {\n  padding: 0 50px;\n}\n\nfooter {\n  width: 100%;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: #a39d92;\n  padding: 5px 40px;\n}\nfooter p {\n  font-size: 1.2rem;\n  color: #39383b;\n  font-family: "Lobster", cursive;\n}\nfooter .fa-copyright {\n  margin: 0 20px;\n}\n\n.score-container {\n  width: 50%;\n  position: relative;\n}\n.score-container .list {\n  height: 70%;\n  overflow: auto;\n  scrollbar-color: #daccc3 transparent;\n}\n.score-container .list ul {\n  display: flex;\n  flex-flow: column;\n  list-style-type: none;\n  padding-left: 0;\n}\n.score-container .list .flex-list {\n  display: flex;\n  justify-content: space-between;\n  padding: 10px 20px;\n}\n.score-container .list .flex-list p {\n  font-size: 1.2rem;\n  font-family: "Merriweather Sans", sans-serif;\n}\n.score-container .list .flex-list .user {\n  color: #daccc3;\n}\n.score-container .list .flex-list .score {\n  color: white;\n}\n.score-container #refresh {\n  font-size: 1.1rem;\n  background-color: #205c8c;\n  color: #daccc3;\n  border: none;\n  border-radius: 6px;\n  -webkit-border-radius: 6px;\n  -moz-border-radius: 6px;\n  -ms-border-radius: 6px;\n  -o-border-radius: 6px;\n  box-shadow: 2px 2px 5px #a39d92;\n  position: absolute;\n  top: 4%;\n  right: 50px;\n  padding: 8px 35px;\n}\n.score-container #refresh:active {\n  background-color: #1a4c73;\n  color: black;\n}\n\nform {\n  width: 50%;\n  height: 70%;\n  display: flex;\n  flex-flow: column;\n}\nform input {\n  height: 2rem;\n}\nform .input {\n  margin-bottom: 30px;\n  background-color: transparent;\n  border-top: none;\n  border-left: none;\n  border-right: none;\n  color: #daccc3;\n}\nform .input:focus {\n  background-color: #6c6a6f;\n}\nform .input::placeholder {\n  color: #daccc3;\n  font-size: 1rem;\n  font-style: italic;\n}\nform #submit {\n  font-size: 1.1rem;\n  background-color: #106e46;\n  color: #daccc3;\n  border: none;\n  border-radius: 6px;\n  -webkit-border-radius: 6px;\n  -moz-border-radius: 6px;\n  -ms-border-radius: 6px;\n  -o-border-radius: 6px;\n  box-shadow: 2px 2px 5px #a39d92;\n  width: 40%;\n  align-self: flex-end;\n}\nform #submit:active {\n  background-color: #0c5335;\n  color: black;\n}\nform #error-msg {\n  margin-top: 50px;\n  margin-left: 50px;\n  color: red;\n}\nform #success-msg {\n  margin-top: 50px;\n  margin-left: 50px;\n  color: green;\n}\n\n.d-none {\n  display: none;\n}\n\n/*# sourceMappingURL=style-src.css.map */\n',"",{version:3,sources:["webpack://./src/style/style-src.scss","webpack://./src/style/style-src.css"],names:[],mappings:"AASA;EACE,kBAAA;EACA,yDAAA;EACA,aAAA;EACA,iBAAA;EACA,SAAA;EACA,UAAA;EACA,WAAA;EACA,aAAA;EACA,gBAAA;ACNF;;ADSA;EACE,YAAA;EACA,+BAjBa;EAkBb,cApBY;EAqBZ,eAAA;ACNF;;ADSA;EACE,4CAtBU;EAuBV,eAAA;EACA,cA1BY;ACoBd;;ADSA;EACE,WAAA;EACA,aAAA;EACA,iBAAA;ACNF;;ADSA;EACE,eAAA;ACNF;;ADSA;EACE,WAAA;EACA,kBAAA;EACA,SAAA;EACA,OAAA;EACA,QAAA;EACA,yBA9CY;EA+CZ,iBAAA;ACNF;ADQE;EACE,iBAAA;EACA,cArDU;EAsDV,+BAlDW;AC4Cf;ADSE;EACE,cAAA;ACPJ;;AD6BA;EACE,UAAA;EACA,kBAAA;AC1BF;AD4BE;EACE,WAAA;EACA,cAAA;EACA,oCAAA;AC1BJ;AD4BI;EACE,aAAA;EACA,iBAAA;EACA,qBAAA;EACA,eAAA;AC1BN;AD6BI;EACE,aAAA;EACA,8BAAA;EACA,kBAAA;AC3BN;AD6BM;EACE,iBAAA;EACA,4CAlGI;ACuEZ;AD8BM;EACE,cAxGM;AC4Ed;AD+BM;EACE,YAAA;AC7BR;ADkCE;EAhDA,iBAAA;EACA,yBApEoB;EAqEpB,cAnEY;EAoEZ,YAAA;EACA,kBAAA;EACA,0BAAA;EACA,uBAAA;EACA,sBAAA;EACA,qBAAA;EACA,+BAAA;EA0CE,kBAAA;EACA,OAAA;EACA,WAAA;EACA,iBAAA;ACxBJ;AD2BE;EACE,yBAAA;EACA,YAAA;ACzBJ;;AD6BA;EACE,UAAA;EACA,WAAA;EACA,aAAA;EACA,iBAAA;AC1BF;AD4BE;EACE,YAAA;AC1BJ;AD6BE;EACE,mBAAA;EACA,6BAAA;EACA,gBAAA;EACA,iBAAA;EACA,kBAAA;EACA,cAhJU;ACqHd;AD8BE;EACE,yBAAA;AC5BJ;AD+BE;EACE,cAxJU;EAyJV,eAAA;EACA,kBAAA;AC7BJ;ADgCE;EA5FA,iBAAA;EACA,yBA4F4B;EA3F5B,cAnEY;EAoEZ,YAAA;EACA,kBAAA;EACA,0BAAA;EACA,uBAAA;EACA,sBAAA;EACA,qBAAA;EACA,+BAAA;EAsFE,UAAA;EACA,oBAAA;ACtBJ;ADyBE;EACE,yBAAA;EACA,YAAA;ACvBJ;AD0BE;EA7GA,gBAAA;EACA,iBAAA;EA+GE,UAAA;ACxBJ;AD2BE;EAnHA,gBAAA;EACA,iBAAA;EAqHE,YAAA;ACzBJ;;AD6BA;EACE,aAAA;AC1BF;;AAEA,wCAAwC",sourceRoot:""}]);const d=l},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var A=n(e);return e[2]?"@media ".concat(e[2]," {").concat(A,"}"):A})).join("")},e.i=function(n,A,t){"string"==typeof n&&(n=[[null,n,""]]);var r={};if(t)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(r[a]=!0)}for(var i=0;i<n.length;i++){var s=[].concat(n[i]);t&&r[s[0]]||(A&&(s[2]?s[2]="".concat(A," and ").concat(s[2]):s[2]=A),e.push(s))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var A=0,t=new Array(e);A<e;A++)t[A]=n[A];return t}n.exports=function(n){var A,t,r=(t=4,function(n){if(Array.isArray(n))return n}(A=n)||function(n,e){var A=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=A){var t,r,o=[],a=!0,i=!1;try{for(A=A.call(n);!(a=(t=A.next()).done)&&(o.push(t.value),!e||o.length!==e);a=!0);}catch(n){i=!0,r=n}finally{try{a||null==A.return||A.return()}finally{if(i)throw r}}return o}}(A,t)||function(n,A){if(n){if("string"==typeof n)return e(n,A);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?e(n,A):void 0}}(A,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[1],a=r[3];if(!a)return o;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),c="/*# ".concat(s," */"),l=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[o].concat(l).concat([c]).join("\n")}return[o].join("\n")}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},379:n=>{var e=[];function A(n){for(var A=-1,t=0;t<e.length;t++)if(e[t].identifier===n){A=t;break}return A}function t(n,t){for(var o={},a=[],i=0;i<n.length;i++){var s=n[i],c=t.base?s[0]+t.base:s[0],l=o[c]||0,u="".concat(c," ").concat(l);o[c]=l+1;var d=A(u),p={css:s[1],media:s[2],sourceMap:s[3]};-1!==d?(e[d].references++,e[d].updater(p)):e.push({identifier:u,updater:r(p,t),references:1}),a.push(u)}return a}function r(n,e){var A=e.domAPI(e);return A.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;A.update(n=e)}else A.remove()}}n.exports=function(n,r){var o=t(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var i=A(o[a]);e[i].references--}for(var s=t(n,r),c=0;c<o.length;c++){var l=A(o[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=s}}},569:n=>{var e={};n.exports=function(n,A){var t=function(n){if(void 0===e[n]){var A=document.querySelector(n);if(window.HTMLIFrameElement&&A instanceof window.HTMLIFrameElement)try{A=A.contentDocument.head}catch(n){A=null}e[n]=A}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(A)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e),e}},565:(n,e,A)=>{n.exports=function(n){var e=A.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(A){!function(n,e,A){var t=A.css,r=A.media,o=A.sourceMap;r?n.setAttribute("media",r):n.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(t,n)}(e,n,A)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},916:(n,e,A)=>{n.exports=A.p+"996e7bcacf9e45d4ee9b.png"}},e={};function A(t){var r=e[t];if(void 0!==r)return r.exports;var o=e[t]={id:t,exports:{}};return n[t](o,o.exports,A),o.exports}A.m=n,A.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return A.d(e,{a:e}),e},A.d=(n,e)=>{for(var t in e)A.o(e,t)&&!A.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},A.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),A.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;A.g.importScripts&&(n=A.g.location+"");var e=A.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var t=e.getElementsByTagName("script");t.length&&(n=t[t.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),A.p=n})(),A.b=document.baseURI||self.location.href,(()=>{var n=A(379),e=A.n(n),t=A(795),r=A.n(t),o=A(569),a=A.n(o),i=A(565),s=A.n(i),c=A(216),l=A.n(c),u=A(589),d=A.n(u),p=A(822),f={};f.styleTagTransform=d(),f.setAttributes=s(),f.insert=a().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=l(),e()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;const E="https://us-central1-js-capstone-backend.cloudfunctions.net/api/games/bvscpmjtUfg4AW2dXLnh",m=document.getElementById("submit"),C=document.getElementById("refresh"),h=document.getElementById("user"),B=document.getElementById("score"),g=n=>{const e=document.getElementById("error-msg"),A=document.getElementById("success-msg");n?(A.classList.remove("d-none"),e.classList.add("d-none")):(A.classList.add("d-none"),e.classList.remove("d-none"))},b=async()=>{const n=await fetch(`${E}/scores`);(n=>{const e=document.getElementById("list");e.innerHTML="",n.forEach((n=>{const A=document.createElement("li");A.className="flex-list";const t=document.createElement("p");t.className="user flex-list-item",t.innerText=n.user;const r=document.createElement("p");r.className="score flex-list-item",r.innerText=n.score,A.appendChild(t),A.appendChild(r),e.appendChild(A)}))})((await n.json()).result)};m.addEventListener("click",(n=>{n.preventDefault(),0===h.value.length||0===B.value.length||isNaN(B.value)?g(!1):(g(!0),(async(n,e)=>{await fetch(`${E}/scores`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({user:n,score:e})})})(h.value,B.value)),h.value="",B.value=""})),C.addEventListener("click",(()=>{b()})),b(),fetch("https://us-central1-js-capstone-backend.cloudfunctions.net/api/games",{method:"POST",body:JSON.stringify({name:"Rachid Game 2"}),headers:{"Content-Type":"application/json"}}).then((n=>n.json())).then((n=>console.log(n)))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,