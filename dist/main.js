(()=>{"use strict";var n={822:(n,e,t)=>{t.d(e,{Z:()=>i});var r=t(15),A=t.n(r),o=t(645),a=t.n(o)()(A());a.push([n.id,"body {\n  position: relative;\n  display: flex;\n  flex-flow: column;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  height: 100vh;\n  overflow: hidden;\n}\n\nh1 {\n  margin: 20px;\n}\n\nmain {\n  height: 75%;\n  border: 5px solid #000;\n  display: flex;\n  margin: 20px 80px;\n}\n\n.main-item {\n  padding: 0 50px;\n}\n\n.score-container {\n  width: 50%;\n  position: relative;\n}\n\n#refresh {\n  position: absolute;\n  top: 2.5%;\n  right: 50px;\n  padding: 4px 10px;\n}\n\n.list {\n  border: 1px solid #000;\n  height: 70%;\n  overflow: auto;\n}\n\n.list ul {\n  display: flex;\n  flex-flow: column;\n  list-style-type: none;\n  padding-left: 0;\n}\n\n.flex-list {\n  display: flex;\n  justify-content: space-between;\n}\n\nform {\n  width: 50%;\n  display: flex;\n  flex-flow: column;\n}\n\nform .input {\n  margin-bottom: 30px;\n}\n\nform input {\n  height: 2rem;\n}\n\n#submit {\n  width: 50%;\n  align-self: flex-end;\n}\n\nfooter {\n  width: 100%;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: #636363;\n  padding: 5px 40px;\n}\n\n.fa-copyright {\n  margin: 0 20px;\n}\n\nfooter p {\n  font-size: 1.2rem;\n  color: #fff;\n}\n\n/*# sourceMappingURL=style-src.css.map */\n","",{version:3,sources:["webpack://./src/style/style-src.scss","webpack://./src/style/style-src.css"],names:[],mappings:"AAAA;EACE,kBAAA;EACA,aAAA;EACA,iBAAA;EACA,SAAA;EACA,UAAA;EACA,WAAA;EACA,aAAA;EACA,gBAAA;ACCF;;ADEA;EACE,YAAA;ACCF;;ADEA;EACE,WAAA;EACA,sBAAA;EACA,aAAA;EACA,iBAAA;ACCF;;ADEA;EACE,eAAA;ACCF;;ADEA;EACE,UAAA;EACA,kBAAA;ACCF;;ADEA;EACE,kBAAA;EACA,SAAA;EACA,WAAA;EACA,iBAAA;ACCF;;ADEA;EACE,sBAAA;EACA,WAAA;EACA,cAAA;ACCF;;ADEA;EACE,aAAA;EACA,iBAAA;EACA,qBAAA;EACA,eAAA;ACCF;;ADEA;EACE,aAAA;EACA,8BAAA;ACCF;;ADEA;EACE,UAAA;EACA,aAAA;EACA,iBAAA;ACCF;;ADEA;EACE,mBAAA;ACCF;;ADEA;EACE,YAAA;ACCF;;ADEA;EACE,UAAA;EACA,oBAAA;ACCF;;ADEA;EACE,WAAA;EACA,kBAAA;EACA,SAAA;EACA,OAAA;EACA,QAAA;EACA,yBAAA;EACA,iBAAA;ACCF;;ADEA;EACE,cAAA;ACCF;;ADEA;EACE,iBAAA;EACA,WAAA;ACCF;;AAEA,wCAAwC",sourceRoot:""}]);const i=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var A={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(A[a]=!0)}for(var i=0;i<n.length;i++){var s=[].concat(n[i]);r&&A[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),e.push(s))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,A=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,A,o=[],a=!0,i=!1;try{for(t=t.call(n);!(a=(r=t.next()).done)&&(o.push(r.value),!e||o.length!==e);a=!0);}catch(n){i=!0,A=n}finally{try{a||null==t.return||t.return()}finally{if(i)throw A}}return o}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=A[1],a=A[3];if(!a)return o;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),c="/*# ".concat(s," */"),l=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[o].concat(l).concat([c]).join("\n")}return[o].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},a=[],i=0;i<n.length;i++){var s=n[i],c=r.base?s[0]+r.base:s[0],l=o[c]||0,u="".concat(c," ").concat(l);o[c]=l+1;var f=t(u),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==f?(e[f].references++,e[f].updater(d)):e.push({identifier:u,updater:A(d,r),references:1}),a.push(u)}return a}function A(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;t.update(n=e)}else t.remove()}}n.exports=function(n,A){var o=r(n=n||[],A=A||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var i=t(o[a]);e[i].references--}for(var s=r(n,A),c=0;c<o.length;c++){var l=t(o[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r=t.css,A=t.media,o=t.sourceMap;A?n.setAttribute("media",A):n.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var A=e[r];if(void 0!==A)return A.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=t(379),e=t.n(n),r=t(795),A=t.n(r),o=t(569),a=t.n(o),i=t(565),s=t.n(i),c=t(216),l=t.n(c),u=t(589),f=t.n(u),d=t(822),p={};p.styleTagTransform=f(),p.setAttributes=s(),p.insert=a().bind(null,"head"),p.domAPI=A(),p.insertStyleElement=l(),e()(d.Z,p),d.Z&&d.Z.locals&&d.Z.locals;const E="https://us-central1-js-capstone-backend.cloudfunctions.net/api/games/aOXLFNfc45MvyePSMZFH",C=document.getElementById("submit"),m=document.getElementById("refresh"),h=async()=>{const n=await fetch(`${E}/scores`);(n=>{const e=document.getElementById("list");e.innerHTML="",n.forEach((n=>{const t=document.createElement("li");t.className="flex-list";const r=document.createElement("p");r.className="user flex-list-item",r.innerText=n.user;const A=document.createElement("p");A.className="score flex-list-item",A.innerText=n.score,t.appendChild(r),t.appendChild(A),e.appendChild(t)}))})((await n.json()).result)};C.addEventListener("click",(n=>{n.preventDefault(),(async(n,e)=>{await fetch(`${E}/scores`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({user:n,score:e})})})(document.getElementById("user").value,document.getElementById("score").value)})),m.addEventListener("click",(()=>{h()})),h()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,